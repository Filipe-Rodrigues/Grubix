/********************************************************************************
This file is part of ShoX.

ShoX is free software; you can redistribute it and/or modify it under the terms
of the GNU General Public License as published by the Free Software Foundation;
either version 2 of the License, or (at your option) any later version.

ShoX is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with 
ShoX; if not, write to the Free Software Foundation, Inc., 51 Franklin Street,
Fifth Floor, Boston, MA 02110-1301, USA

Copyright 2006 The ShoX developers as defined under http://shox.sourceforge.net
 ********************************************************************************/

package br.ufla.dcc.grubix.xml;

import java.util.HashMap;
import java.util.Map;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;



import org.apache.log4j.Logger;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

import br.ufla.dcc.grubix.simulator.Position;


/**
 * This class is responsible for reading and writing the initial node positions
 * from/into an XML configuration file. Currently, node positions can be stored
 * either directly in the main ShoX config file (embedded in the position tag)
 * or in an external file which contains nothing but node positions. Storing
 * initial node positions is essential not only to set up the simulator itself,
 * but also for the network monitor which can be used after the simulation has
 * finished.
 * 
 * @author jlsx
 */
public class PositionHandler extends DefaultHandler {

	/**
	 * Logger of the class.
	 */
	private static final Logger LOGGER = Logger.getLogger(PositionHandler.class
			.getName());

	/**
	 * Indicates that position information is embedded in the main
	 * configuration.
	 */
	public static final int EMBEDDED = 1;

	/**
	 * Indicates that position information is stored in an external positions
	 * file.
	 */
	public static final int EXTERNAL = 2;

	/**
	 * Indicates that position information is generated by a specified position
	 * generator.
	 */
	public static final int GENERATED = 3;

	/**
	 * Maps node IDs to node's position. Values correspond to the underlying
	 * file.
	 */
	private final Map<Integer, Position> positions;

	/** Stores nodes' positions in mode GENERATED. */
	private String positionsFile;

	/** Reflects the mode in which this PositionHandler is used. */
	private final int mode;

	/**
	 * This constructor assumes that the position information is stored in the
	 * main ShoX configuration file itself, thus, no filename is provided. The
	 * ConfigurationReader is responsible for invoking the necessary parser
	 * methods in this class.
	 */
	public PositionHandler() {
		this.positions = new HashMap<Integer, Position>();
		this.mode = EMBEDDED;
	}

	/**
	 * This constructor assumes that the position information is stored in an
	 * external file which contains nothing but node positions and conforms to
	 * the XML Schema conf/positions.xsd.
	 * 
	 * @param positionsFile
	 *            The path + name of the file containing the node positions
	 */
	public PositionHandler(String positionsFile) {
		this.positions = new HashMap<Integer, Position>();
		LOGGER.info("Trying to parse the position configuration file "
				+ positionsFile);
		try {
			SAXParserFactory spf = SAXParserFactory.newInstance();
			spf.setNamespaceAware(true);
			SAXParser saxParser = spf.newSAXParser();
			XMLReader xmlReader = saxParser.getXMLReader();
			xmlReader.setContentHandler(this);
			xmlReader.parse(positionsFile);
		} catch (Exception e) {
			LOGGER.fatal("The position configuration could not be parsed successfully.", e);
			e.printStackTrace();
			System.exit(1);
		}
		LOGGER.info("Position configuration file successfully parsed.");
		this.mode = EXTERNAL;
	}

	/**
	 * This constructor is used when the node positions are already known and are to be stored in an
	 * external file which conforms to the XML Schema conf/positions.xsd. This is useful when the
	 * initial node positions are generated by the position generator specified in the main ShoX
	 * configuration file: while the simulator can access the generated node positions in memory,
	 * the subsequent network monitor relies on the configuration file to reconstruct the initial
	 * node distribution used for the simulation.
	 *
	 * @param positionsFile The path + name of the file containing the node positions
	 * @param positions A hash table containing all node positions
	 */
	public PositionHandler(String positionsFile, Map<Integer, Position> positions) {
		this.positions = positions;
		this.positionsFile = positionsFile;
		this.mode = GENERATED;
	}

	/**
	 * Writes node positions to an XML file complying with conf/positions.xsd.
	 * Works only if the current mode is GENERATED.
	 */
	public final void writeToXML() {
		if (this.mode == GENERATED) {
			try {
				XMLWriter writer = new XMLWriter(this.positionsFile);
				writer.openTag("positions");
				HashMap<String, String> coordinates;
				for (Integer i : positions.keySet()) {
					coordinates = new HashMap<String, String>();
					Double tx = this.positions.get(i).getXCoord();
					Double ty = this.positions.get(i).getYCoord();
					coordinates.put("id", i.toString());
					coordinates.put("x", tx.toString());
					coordinates.put("y", ty.toString());
					writer.writeEmptyTag("position", coordinates);
				}
				writer.closeTag("positions");
			} catch (Exception e) {
				LOGGER.error("The node position information could not be written to "
						+ this.positionsFile
						+ ", because of exception " + e.getMessage(), e);
			}
		}
	}

	/**
	 * Reflects the mode in which this PositionHandler is used. There are three:
	 * Mode Embedded: Position information is embedded in the main ShoX
	 * configuration file Mode External: Position information is stored in an
	 * external positions file Mode Generated: Position information is generated
	 * by a specified position generator
	 * 
	 * @return The mode of this PositionHandler
	 */
	public final int getMode() {
		return this.mode;
	}

	/**
	 * @return A table with (node ID, position [x, y coordinates]) for all
	 *         nodes.
	 */
	public final Map<Integer, Position> getPositions() {
		return this.positions;
	}

	/**
	 * Inserts a new position into the position handler.
	 *
	 * @param id new position id
	 * @param position position object
	 */
	public final void putPosition(int id, Position position) {
		this.positions.put(id, position);
	}
	
	/**
	 * The parser calls this function for each element in a document.
	 * 
	 * @param namespaceURI The Namespace URI, or empty string, if no URI is there
	 * @param localName local name (without prefix)
	 * @param qName qualified name (with prefix)
	 * @param atts attributes attached to the element
	 * @throws SAXException Any SAX exception, possibly wrapping another exception
	 */
	@Override
	public final void startElement(String namespaceURI, String localName,
			String qName, Attributes atts) throws SAXException {
		if (localName.equals("position")) {
			Integer id = new Integer(atts.getValue("id"));
			double x = Double.parseDouble(atts.getValue("x"));
			double y = Double.parseDouble(atts.getValue("y"));
			this.positions.put(id, new Position(x, y));
		}
	}
}
